name: Local CI/CD Pipeline for SmartLocker

on:
  push:
    branches:
      - preprod

jobs:
  # 1. Linting
  lint:
    runs-on: ubuntu-latest
    container:
      image: rust:latest
      options: --user root
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v3
      - name: 🧰 Install build dependencies
        run: rustup component add clippy
      - name: 🧹 Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  # 2. Formatage
  format:
    runs-on: ubuntu-latest
    container:
      image: rust:latest
      options: --user root
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v3
      - name: 🧰 Install build dependencies
        run: rustup component add rustfmt
      - name: 🧹 Check formatting
        run: cargo fmt --all -- --check

  # 3. Build cross-platform
  build:
    runs-on: ubuntu-latest
    container:
      image: rust:latest
      options: --user root
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v3

      - name: 🧰 Install build dependencies
        run: |
          apt-get update -qq > /dev/null
          apt-get install -y -qq \
            build-essential \
            gcc-mingw-w64 \
            curl \
            pkg-config \
            zip \
            git \
            nodejs \
            libssl-dev \
            > /dev/null 2>&1 || {
              echo "❌ Failed to install packages"
              exit 1
            }
      
      - name: 🛠️ Install Rust tools and targets
        run: |
          rustup target add x86_64-pc-windows-gnu

      - name: 🛠️ Build for Linux
        run: cargo build --release

      - name: 🛠️ Build for Windows
        run: |
          cargo build --release --target x86_64-pc-windows-gnu

      - name: 📦 Archive binaries
        run: |
          mkdir -p dist/linux dist/windows
          cp target/release/smart-locker dist/linux/
          tar -czf smartlocker_linux.tar.gz -C dist linux
          cp target/x86_64-pc-windows-gnu/release/smart-locker.exe dist/windows/
          zip -r smartlocker_windows.zip dist/windows

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            smartlocker_linux.tar.gz
            smartlocker_windows.zip



  # 4. Tests unitaires
  test:
    runs-on: ubuntu-latest
    container:
      image: rust:latest
      options: --user root
    needs: [lint, format, build]
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v3
      - name: 🧪 Run tests
        run: |
          cargo run init
          cargo test --release --features disable_clipboard_tests -- --nocapture


  # 5 Documentation 
  docs:
    name: docs-online
    runs-on: ubuntu-latest
    container:
      image: rust:latest
      options: --user root
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v3
      - name: 📚 Generate documentation online
        run: cargo doc --no-deps
      - name: 📤 Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: target/doc

  # 6. Release
  release:
    runs-on: ubuntu-latest
    container:
      image: rust:latest
      options: --user root
    needs: [test, docs]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v3

      - name: 🔐 Configure Git for OAuth
        run: |
          git config --global user.email "ci@smartlocker.local"
          git config --global user.name "SmartLocker CI"
          git config --global --add safe.directory /__w/smart-locker/smart-locker
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/WillIsback/smart-locker.git

      - name: 🛠️ Install jq
        run: |
          apt-get update
          apt-get install -y jq

      - name: 🛠️ Install Rust tools
        run: |
          cargo install cargo-release

      - name: 🏷️ Extract version from Cargo.toml
        id: version
        run: |
          # Extract the version from Cargo.toml
          TARGET_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          echo "Version extracted from Cargo.toml: $TARGET_VERSION"

          # Export the version for later steps
          echo "TARGET_VERSION=$TARGET_VERSION" >> $GITHUB_ENV

      - name: 🏷️ Generate and push Git tag
        run: |
          # Check if the tag already exists
          if git rev-parse "v${{ env.TARGET_VERSION }}" >/dev/null 2>&1; then
            echo "⚠️ Tag v${{ env.TARGET_VERSION }} already exists. It will be overwritten."
            git tag -d "v${{ env.TARGET_VERSION }}"
            git push origin ":refs/tags/v${{ env.TARGET_VERSION }}"
          fi

          # Create and push the tag
          git tag -a "v${{ env.TARGET_VERSION }}" -m "Release version v${{ env.TARGET_VERSION }}"
          git push origin "v${{ env.TARGET_VERSION }}"

      - name: 🚀 Run cargo release with synchronized version
        run: |
          cargo release --execute --tag-name "v${{ env.TARGET_VERSION }}" --no-publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: 🚀 Publish to crates.io
        run: |
          cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: 📝 Generate changelog
        run: |
          git-cliff --tag "v${{ env.TARGET_VERSION }}" > CHANGELOG.md
          echo "✅ Changelog generated successfully."

      - name: 🏷️ Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            smartlocker_linux.tar.gz
            smartlocker_windows.zip
          body_path: CHANGELOG.md