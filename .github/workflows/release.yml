name: SmartLocker CI/CD Optimisé

on:
  push:
    branches:
      - dev
      - preprod
      - main
    tags:
      - 'v*.*.*'

jobs:
  # 🔨 Tests obligatoires sur chaque push (dev, preprod, main)
  quality:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/willisback/smart-locker-ci:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - run: rustup component add clippy rustfmt
      - name: 🧹 Lint (clippy)
        run: cargo clippy --all-targets --all-features -- -D warnings
      - name: 🔍 Check Format
        run: cargo fmt --all -- --check
      - name: 🔨 Build & Test
        run: |
          cargo build --release
          cargo run init
          cargo test --release --features disable_clipboard_tests

  # 📦 Release uniquement sur tags (v*.*.*)
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [quality]  # Conditionne la release à la réussite des tests
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/willisback/smart-locker-ci:latest
      options: --user root
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 📦 Build Binaries (Linux & Windows)
        run: |
          cargo build --release
          cargo build --release --target x86_64-pc-windows-gnu
          mkdir -p dist/linux dist/windows
          cp target/release/smart-locker dist/linux/
          tar -czf smartlocker_linux.tar.gz -C dist linux
          cp target/x86_64-pc-windows-gnu/release/smart-locker.exe dist/windows/
          zip -r smartlocker_windows.zip dist/windows

      - name: 📦 Build .deb & .rpm
        run: |
          cargo deb --fast
          cargo generate-rpm

      - name: 📝 Generate Changelog
        run: |
          git cliff --tag "${{ github.ref_name }}" -o CHANGELOG.md

      - name: 📤 Create GitHub Release
        uses: actions/create-release@v1.1.4
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ github.ref_name }}"
          release_name: "Release ${{ github.ref_name }}"
          draft: false
          prerelease: contains(github.ref_name, 'rc') || contains(github.ref_name, 'pre')
          body_path: CHANGELOG.md

      - name: 📤 Upload Assets (.deb, .rpm, binaries)
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/debian/smart-locker_*.deb
          asset_name: smartlocker_${{ github.ref_name }}.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: 📤 Upload RPM
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/generate-rpm/smart-locker-*.rpm
          asset_name: smartlocker_${{ github.ref_name }}.rpm
          asset_content_type: application/x-rpm

      - name: 📤 Upload Linux Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: smartlocker_linux.tar.gz
          asset_name: smartlocker_linux.tar.gz
          asset_content_type: application/gzip
        
      - name: 📤 Upload Windows Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: smartlocker_windows.zip
          asset_name: smartlocker_windows.zip
          asset_content_type: application/zip
